version
library(Pathogenomics)
library(knitr, lib.loc = "/usr/local/lib/R/site-library")
library(Pathogenomics)
cat("TITLE extra line", "2 3 5 7", "11 13 17", file = "ex.data", sep = "\n")
scan("ex.data", skip = 1)
cat("Player ", player_start, ":\nDice after 1 roll(s):\n", x, "\nHow many dice do you want to save?")
cat("Player ", ":\nDice after 1 roll(s):\n", x, "\nHow many dice do you want to save?")
cat("iteration = ", iter <- iter + 1, "\n")
cat("iteration = ")
cat("iteration = ")
cat("iteration = ")
iter <- stats::rpois(1, lambda = 10)
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
iter <- stats::rpois(1, lambda = 10)
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
iter <- stats::rpois(1, lambda = 10)
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
iter <- stats::rpois(1, lambda = 10)
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
iter <- stats::rpois(1, lambda = 10)
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
iter <- stats::rpois(1, lambda = 10)
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
cat("iteration = ", test <- iter + 1, "\n")
cat("iteration = ", test <- iter + 1, "\n")
scan()
cat(paste(letters, 100* 1:26), fill = TRUE, labels = paste0("{", 1:10, "}:"))
cat(paste(letters, 100* 1:26), fill = TRUE, labels = paste0("{", 1:10, "}:"))
letters
cat("iteration = ")
print("iteration = ")
condalist
library(reticulate)
conda_list()
use_condaenv(Spades)
use_condaenv("Spades")
conda_list()
conda_version()
py_list_packages()
test = py_list_attributes()
test = py_list_packages()
View(test)
library(Pathogenomics)
virtualenv_list()
library(Pathogenomics)
detach("package:reticulate", unload = TRUE)
BiocManager::install("Biostrings")
install.packages("BiocManager")
BiocManager::install("Biostrings")
BiocManager::install("GenomicRanges")
install.packages("R.utils")
library(Pathogenomics)
library(Pathogenomics)
library(Pathogenomics)
library(Pathogenomics)
