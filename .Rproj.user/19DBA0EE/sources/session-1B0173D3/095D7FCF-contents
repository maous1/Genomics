#' Screen for a set of genes of interst (e.g. virulence genes) from a (draft of complete) genome
#'
#' screening returns a vector indicating if the genome matches each gene of interst.
#'
#' @param genomePath A string of character corresponding to the path of the FASTA file of the genome to be screened.
#'
#' @param genesPath A vector of string of character corresponding to the paths of the FASTA files of the genes of interst (e.g. virulence genes).
#'
#' @param lengthconf The minimum accepted length of the hit (in percentage of the gene of interest).
#'
#' @param identconf The minimum accepted identity of the hit (in percentage of identity).
#' @param outputdir The directory where output files are stored.
#'
#' @return result is a vector containing 0 and 1. This vector has the length of the number of genes of interest.
#' The name of the elements of this vector corresponds to the name of the gene of interest.
#' @examples
#' @export
screening <- function(genomePath,genesPath,lengthconf,identconf,outputdir,prefix)
{

#Add comments and doc
  genomeName <- gsub(pattern='.fasta',replacement='',x=basename(genomePath))
  genesName  <- gsub(pattern='.fasta',replacement='',x=basename(genesPath))

  if(dir.exists(outputdir)==F){dir.create(outputdir)}

  try(unlink("temp", recursive=TRUE))
  dir.create('temp')
  dir.create('temp/dbblast')
  myarg <-paste0('-in ',genomePath,' -out temp/dbblast/db -dbtype nucl')
  system2(command = 'makeblastdb', args = myarg,stdout=F)

  Ngene <- length(genesPath)
  result <- numeric()

  for (i in 1:Ngene)
  {
    myarg <-  paste0('-query ',genesPath[i],' -db temp/dbblast/db -out temp/blast.txt -num_threads 8 -num_alignments 10 -outfmt "7 qacc bitscore qlen length pident qstart qend sacc sstart send "' )
    system2(command = 'blastn', args = myarg)

    blast <- try(read.table('temp/blast.txt', comment.char = '#'),silent=T)
    if (class(blast) == 'data.frame')
    {
      colnames(blast) <- c('querry.access','bitscore','querry.length','alignment.lenght','pc.ident.','querry.start','querry.end','subject.access','subject.start','subject.end')
      blast <- blast[sort.list(blast$bitscore, decreasing = T), ]
      pc.length <- 100 * round(blast$alignment.lenght / blast$querry.length, 3)
      blast <-  data.frame(blast[, c(1, 2, 3)], pc.length, blast[, -c(1, 2, 3)])
      blast <- blast[blast$pc.length >= lengthconf, ]
      blast <- blast[blast$pc.ident. >= identconf, ]
      if (dim(blast)[1] > 0)
      {
        #write.csv(blast,paste0(outputdir,'/',paste0(genomeName,genesName[i]),'.csv'),row.names = F)
        result[i] <- blast$pc.length[1]
      }
      else(result[i] <- 0)
    }
    else(result[i] <- 0)
    try(file.remove("temp/blast.txt"))
  }
  names(result) <- genesName

  try(unlink("temp", recursive=TRUE))
  return(result)
}
